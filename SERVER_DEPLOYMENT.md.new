# User Management System - Server Deployment Guide

This guide provides instructions for deploying the User Management System API to Render.com while keeping the client/frontend on Firebase Hosting.

## Deployment Architecture

- **Frontend**: Angular client hosted on Firebase Hosting
- **Backend**: Node.js API server hosted on Render.com

## Deploying the Server to Render.com

### Prerequisites

- A Render.com account
- Git repository with your code

### Deployment Steps

1. **Create a new Web Service on Render**:
   - Log in to your [Render Dashboard](https://dashboard.render.com/)
   - Click "New" > "Web Service"
   - Connect your GitHub/GitLab repository or upload your code
   - Select the `/server` directory as the root directory

2. **Configure your Web Service**:
   - **Name**: `user-management-api` (or your preferred name)
   - **Runtime**: `Node`
   - **Build Command**: `npm install`
   - **Start Command**: `node server.js`
   - **Plan**: Select Free or paid plan based on your needs

3. **Environment Variables**:
   Set these environment variables in the Render Dashboard:
   ```
   NODE_ENV=production
   DB_HOST=153.92.15.31
   DB_PORT=3306
   DB_USER=u875409848_igot
   DB_PASSWORD=9T2Z5$3UKkgSYzE
   DB_NAME=u875409848_igot
   JWT_SECRET=mrbeans-secure-jwt-secret-key-2024
   EMAIL_FROM=mrbeans.dev@gmail.com
   SMTP_HOST=smtp.gmail.com
   SMTP_PORT=587
   SMTP_USER=mrbeans.dev@gmail.com
   SMTP_PASS=gezv stxl piar knuw
   PORT=10000
   ```

4. **Deploy**:
   Click "Create Web Service" and wait for the deployment to complete.

5. **Update Client Configuration**:
   - Once deployed, Render will provide you with a URL for your API (e.g., `https://user-management-api.onrender.com`)
   - Update your Angular client's `environment.prod.ts` file with this URL:
   ```typescript
   export const environment = {
       production: true,
       apiUrl: 'https://your-render-api-url.onrender.com', // Replace with your actual Render.com URL
       useFakeBackend: false
   };
   ```

6. **CORS Configuration**:
   The server already has proper CORS configuration for your Firebase hosted frontend:
   ```javascript
   app.use(cors({
      origin: ['http://localhost:4200', 'https://final-user-management.web.app'],
      credentials: true,
   }));
   ```
   Update this configuration if your Firebase hosting URL changes.

7. **Redeploy the Frontend**:
   After updating the environment.prod.ts file, rebuild and redeploy your Angular frontend:
   ```bash
   cd client
   npm run build --prod
   firebase deploy --only hosting
   ```

## Troubleshooting

- **API Connection Issues**: Verify CORS settings and environment variables
- **Database Connection**: Ensure the database server allows connections from Render.com
- **Deployment Failures**: Check Render logs for detailed error messages

## Maintenance

- **Logs**: Monitor application logs on the Render dashboard
- **Scaling**: Upgrade your Render plan if you need more resources
- **Environment Variables**: Update them in the Render dashboard if credentials change
